* nginx source code study

nginx源代码笔记。基于nginx版本1.16。

从nginx核心部分开始，对nginx的基础数据结构、流程、模块进行分析整理。

对于函数，在定义处才加以分析。

对于复杂的结构体的类型的定义直接进行分析，并适当给出使用方法和示例。

** 开始分析

ngx_command_t的定义为

#+BEGIN_SRC c

typedef ngx_command_s ngx_command_t;

#+END_SRC

ngx_command_s的在ngx_conf_file中给出，定义为

#+BEGIN_SRC c

struct ngx_command_s {
    ngx_str_t             name;
    ngx_uint_t            type;
    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
    ngx_uint_t            conf;
    ngx_uint_t            offset;
    void                 *post;
};

#+END_SRC

其中name的是类型为ngx_str_t的变量，通常以ngx_string类型进行初始化，是该
命令类型的字面名称。

type是类型信息，是一系列标志位做或运算的结果。例如：

#+BEGIN_SRC c

#define NGX_MAIN_CONF        0x01000000
#define NGX_CONF_FLAG        0x00000200
#define NGX_DIRECT_CONF      0x00010000

#+END_SRC

等。

set是一个函数指针，返回char *类型，以ngx_conf_set_flag_slot()函数为例，
该函数设置开关值：

#+BEGIN_SRC c

char *
ngx_conf_set_flag_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf; /* 指针来自于conf参数 */

    ngx_str_t        *value; /* 指向ngx_str_t字符串类型的指针 */
    ngx_flag_t       *fp; /* 指向标志类型ngx_flag_t类型的指针 */
    ngx_conf_post_t  *post; /* 后处理函数 */

    /* fp的值设置为指向conf的指针加上对应的cmd的中偏移位置值offset */
    fp = (ngx_flag_t *) (p + cmd->offset); 

    /* 如果不为未设置NGX_CONF_UNSET，则该值发生了重复设置 */
    /* 返回表示重复含义的字符串"is duplicate" */
    if (*fp != NGX_CONF_UNSET) {
        return "is duplicate";
    }

    /* value设置为指向ngx_conf_t类型的指针cf中args成员的elts成员的地址 */
    /* 相当于数组, value[0]指向的字符串的字面值，等同于cmd->name */
    value = cf->args->elts;

    /* 如果指令后面参数的字面值为"on"，则fp所指的元素为1 */
    if (ngx_strcasecmp(value[1].data, (u_char *) "on") == 0) {
        *fp = 1;

    /* 如果指令后面参数的字面值为"on"，则fp所指的元素为0 */
    } else if (ngx_strcasecmp(value[1].data, (u_char *) "off") == 0) {
        *fp = 0;

    /* 否则就是一个无效的字面值，返回NGX_CONF_ERROR */
    } else {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                     "invalid value \"%s\" in \"%s\" directive, "
                     "it must be \"on\" or \"off\"",
                     value[1].data, cmd->name.data);
        return NGX_CONF_ERROR;
    }

    /* 如果cmd->post指针不为空，则返回后续的post_handler()函数执行结果 */

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, fp);
    }

    /* 返回OK信息 */
    return NGX_CONF_OK;
}

#+END_SRC

conf字段待研究。(TODO)

offsetof是一个宏，定义为

#+BEGIN_SRC c

#define offsetof(s, m)   (size_t)&(((s *)0)->m)

#+END_SRC

其中(s *)0是告诉编译器有一个指向结构s的指针，它指向的成员m的地址即为偏
移值，并将该值转换为size_t类型。

post是一个函数指针，多数情况下未启用。

ngx_core_conf_t在ngx_cycle.h中定义为：

#+BEGIN_SRC c

typedef struct {
    ngx_flag_t                daemon;
    ngx_flag_t                master;

    ngx_msec_t                timer_resolution;
    ngx_msec_t                shutdown_timeout;

    ngx_int_t                 worker_processes;
    ngx_int_t                 debug_points;

    ngx_int_t                 rlimit_nofile;
    off_t                     rlimit_core;

    int                       priority;

    ngx_uint_t                cpu_affinity_auto;
    ngx_uint_t                cpu_affinity_n;
    ngx_cpuset_t             *cpu_affinity;

    char                     *username;
    ngx_uid_t                 user;
    ngx_gid_t                 group;

    ngx_str_t                 working_directory;
    ngx_str_t                 lock_file;

    ngx_str_t                 pid;
    ngx_str_t                 oldpid;

    ngx_array_t               env;
    char                    **environment;

    ngx_uint_t                transparent;  /* unsigned  transparent:1; */
} ngx_core_conf_t;

#+END_SRC

daemon是是否后台运行的标志。

master对应于master_process，是主进程模式的相关标志。

在nginx.c中有这样一句：

#+BEGIN_SRC c

    if (ccf->master && ngx_process == NGX_PROCESS_SINGLE) {
        ngx_process = NGX_PROCESS_MASTER;
    }

#+END_SRC

即当core config的master值不为0，并且ngx_process为NGX_PROCESS_SINGLE时，
ngx_process的值设置成NGX_PROCESS_MASTER。

#+BEGIN_SRC c

    if (ngx_process == NGX_PROCESS_SINGLE) {
        ngx_single_process_cycle(cycle);

    } else {
        ngx_master_process_cycle(cycle);
    }

#+END_SRC

当ngx_process为NGX_PROCESS_SINGLE时，执行
ngx_single_process_cycle(cycle)函数；否则执行
ngx_master_process_cycle(cycle)函数。

在os/unix/ngx_process_cycle.c中可以找到ngx_single_process_cycle()函数的
定义：

其中首先是ngx_set_environment(cycle, NULL)的函数调用。

在函数ngx_set_environment()中，ccf是指向ngx_core_conf_t的指针，它首先通
过ngx_get_conf函数获得ngx_core_module的指向ngx_core_conf_t结构体的指针。

当第二个参数为NULL时，返回ccf中的environment成员。

ngx_set_environment()函数只是简单返回了返回ccf中的environment成员，而
cycle的主要的初始化工作都在nginx的main函数中进行。

#+BEGIN_SRC c

    ngx_memzero(&init_cycle, sizeof(ngx_cycle_t));
    init_cycle.log = log;
    ngx_cycle = &init_cycle;

#+END_SRC

log是ngx_log_init(ngx_prefix)中初始化的ngx_log_t类型指针。在之前的注释
中有：

#+BEGIN_SRC c
  
  /* init_cycle.log是必需的，他用于信号量处理和ngx_process_options() */
  
#+END_SRC

ngx_cycle的值被设置为init_cycle的地址。

#+BEGIN_SRC c

    init_cycle.pool = ngx_create_pool(1024, log);

#+END_SRC

通过调用ngx_create_pool()函数，创建了一个pool类型的内存池。用于nginx内
存的分配。

函数ngx_save_argv(&init_cycle, argc, argv)保存了命令行参数传入的内容。

ngx_cycle_t的定义ngx_cycle_s如下：

#+BEGIN_SRC c

struct ngx_cycle_s {
    void                  ****conf_ctx;
    ngx_pool_t               *pool;

    ngx_log_t                *log;
    ngx_log_t                 new_log;

    ngx_uint_t                log_use_stderr;  /* unsigned  log_use_stderr:1; */

    ngx_connection_t        **files;
    ngx_connection_t         *free_connections;
    ngx_uint_t                free_connection_n;

    ngx_module_t            **modules;
    ngx_uint_t                modules_n;
    ngx_uint_t                modules_used;    /* unsigned  modules_used:1; */

    ngx_queue_t               reusable_connections_queue;
    ngx_uint_t                reusable_connections_n;

    ngx_array_t               listening;
    ngx_array_t               paths;

    ngx_array_t               config_dump;
    ngx_rbtree_t              config_dump_rbtree;
    ngx_rbtree_node_t         config_dump_sentinel;

    ngx_list_t                open_files;
    ngx_list_t                shared_memory;

    ngx_uint_t                connection_n;
    ngx_uint_t                files_n;

    ngx_connection_t         *connections;
    ngx_event_t              *read_events;
    ngx_event_t              *write_events;

    ngx_cycle_t              *old_cycle;

    ngx_str_t                 conf_file;
    ngx_str_t                 conf_param;
    ngx_str_t                 conf_prefix;
    ngx_str_t                 prefix;
    ngx_str_t                 lock_file;
    ngx_str_t                 hostname;
};

#+END_SRC

conf_ctx是一个四重指针。经常作为ngx_get_conf()等函数的参数。

ngx_get_conf()函数是一个宏，定义为：

#+BEGIN_SRC c

#define ngx_get_conf(conf_ctx, module)  conf_ctx[module.index]

#+END_SRC

conf_ctx可看作是一个数组，返回的是里面第module.index个元素。

module即ngx_module_t类型，定义如下：

#+BEGIN_SRC c

struct ngx_module_s {
    ngx_uint_t            ctx_index;
    ngx_uint_t            index;

    char                 *name;

    ngx_uint_t            spare0;
    ngx_uint_t            spare1;

    ngx_uint_t            version;
    const char           *signature;

    void                 *ctx;
    ngx_command_t        *commands;
    ngx_uint_t            type;

    ngx_int_t           (*init_master)(ngx_log_t *log);

    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);

    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
    void                (*exit_thread)(ngx_cycle_t *cycle);
    void                (*exit_process)(ngx_cycle_t *cycle);

    void                (*exit_master)(ngx_cycle_t *cycle);

    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_t             spare_hook5;
    uintptr_t             spare_hook6;
    uintptr_t             spare_hook7;
};

#+END_SRC

其中ctx_index至signature成员变量的初始赋值，都由宏NGX_MODULE_V1给出。

ctx指向本模块对应的ctx模块，譬如nginx_core_module对应的ctx，就是在同文
件中定义的ngx_core_module_ctx。

commands对应的是一系列的命令，daemon，master_process等。

type是一个表示该模块类型的量。对于core_module来说就是NGX_CORE_MODULE，
对于http模块就是NGX_HTTP_MODULE。

spare_hook*都赋值为0，由宏NGX_MODULE_V1_PADDING给出。

以上定义是nginx的模块的基本定义，在各个模块的定义中都是相同的结构。

ngx_cycle_s中的pool是一块内存区域。用于分配内存使用。

ngx_cycle_s中的log成员是ngx_log_t类型日志变量。

ngx_log_s中的log_level成员变量指定日志记录等级。

最高值为NGX_LOG_DEBUG=8，用于nginx调试。

file为指向ngx_open_file_t类型的指针。

ngx_open_file_s的结构中包括：

ngx_fd_t类型的文件描述符fd，而ngx_fd_t定义为int；

ngx_str_t类型的文件名称name；

flush函数指针，用于清除文件内容；

data额外的数据指针。

ngx_log_s中的connection是ngx_atomic_uint_t类型，这是ngx中的原子类型。

根据不同环境，不同编译器，不同处理器，ngx_atomic_uint_t的定义有所不同，但总的来说是一个整数。

其对应的函数有ngx_atomic_cmp_set()（比较以及设置函数），ngx_atomic_fetch_add()（取值并相加函数）。

ngx_log_s中定义的handler是ngx_log_handler_pt类型的函数指针，对应data的空指针。

writer是ngx_log_writer_pt类型的函数指针，对应wdata的空指针。

action是char*类型的静态字符串。

next是指向下一个ngx_log_t变量的指针。

ngx_cycle_s中的new_log是ngx_log_t结构类型的变量，是指新的日志结构体变量。

ngx_cycle_s中的log_use_stderr是一个标志，用来指明是否使用stderr作为输出。

ngx_cycle_s中包含的files变量是指向ngx_connection_t类型的双重指针。

ngx_connection_s是经常遇到的结构体，定义为：

#+BEGIN_SRC c

struct ngx_connection_s {
    void               *data;
    ngx_event_t        *read;
    ngx_event_t        *write;

    ngx_socket_t        fd;

    ngx_recv_pt         recv;
    ngx_send_pt         send;
    ngx_recv_chain_pt   recv_chain;
    ngx_send_chain_pt   send_chain;

    ngx_listening_t    *listening;

    off_t               sent;

    ngx_log_t          *log;

    ngx_pool_t         *pool;

    int                 type;

    struct sockaddr    *sockaddr;
    socklen_t           socklen;
    ngx_str_t           addr_text;

    ngx_str_t           proxy_protocol_addr;
    in_port_t           proxy_protocol_port;

#if (NGX_SSL || NGX_COMPAT)
    ngx_ssl_connection_t  *ssl;
#endif

    ngx_udp_connection_t  *udp;

    struct sockaddr    *local_sockaddr;
    socklen_t           local_socklen;

    ngx_buf_t          *buffer;

    ngx_queue_t         queue;

    ngx_atomic_uint_t   number;

    ngx_uint_t          requests;

    unsigned            buffered:8;

    unsigned            log_error:3;     /* ngx_connection_log_error_e */

    unsigned            timedout:1;
    unsigned            error:1;
    unsigned            destroyed:1;

    unsigned            idle:1;
    unsigned            reusable:1;
    unsigned            close:1;
    unsigned            shared:1;

    unsigned            sendfile:1;
    unsigned            sndlowat:1;
    unsigned            tcp_nodelay:2;   /* ngx_connection_tcp_nodelay_e */
    unsigned            tcp_nopush:2;    /* ngx_connection_tcp_nopush_e */

    unsigned            need_last_buf:1;

#if (NGX_HAVE_AIO_SENDFILE || NGX_COMPAT)
    unsigned            busy_count:2;
#endif

#if (NGX_THREADS || NGX_COMPAT)
    ngx_thread_task_t  *sendfile_task;
#endif
};

#+END_SRC

ngx_connection_s中的data类型是空指针，表示该结构体中指向的数据部分。

read表示指向ngx_event_t类型的指针。

ngx_event_t也是nginx中的重要结构体。

ngx_event_s中的data表示该事件中包括的数据指针。

ngx_event_s中包含write成员，唯一的置位函数在ngx_get_connection()中。

ngx_get_connection()是获得当前连接的函数。

在ngx_get_connection()函数中，instance变量是一个标志。

rev，wev是指向ngx_event_t类型的指针。

c是指向ngx_connection_t类型的指针。

nginx的注释指出：UNIX的socket是int类型的。

当ngx_cycle->files不为空，并且s大于等于ngx_cycle->files_n时，返回NULL。

这里的意思是ngx_cycle->files是存在的，并且ngx_get_connection的传入参数
s，大于files_n的话，就返回一个空的连接类型指针（ngx_connection_t *）。

可见ngx_cycle是全局的。

之后c被赋值为ngx_cycle中的free_connections成员。

这里free_connections是指向空闲连接的指针。

当c为NULL时，则调用ngx_drain_connections()函数，消耗连接。

ngx_drain_connections()函数中，主要是查询对cycle中的队列queue中存在的连接情况。

#+BEGIN_SRC c

    n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1);

#+END_SRC

上述语句中，首先取32和cycle->reusable_connections_n / 8的较小值，即当cycle_reusable_connections_n大于32 * 8，即256时，n取32。

当8 <= cycle->reusable_connections_n < 256时，n才取到cycle->reusable_connections_n / 8的值；当cycle->reusable_connections_n < 8时，n取1。

可见n的取值范围为[1, 32]。

验证queue为空的函数是ngx_queue_empty()，它的定义是一个宏，(h == (h)->prev)。

队列的初始化函数是ngx_queue_init(q)，它将q中的成员prev和next都指向自身。

因而当queue的prev是自身时，队列就为空。

ngx_queue_data()是指向包含了q的结构体的实例的指针，其中用到了offsetof函数。

之后设置c->close的标志位置为1，表示连接关闭，接下来使用
c->read->handler处理对应的事件，完成了handler事件之后，可以认为是drain
完毕。

若此时ngx_get_connection()中的c仍为NULL，则表明连接数不够，返回NULL。

如果c不为NULL，则ngx_cycle->free_connections为c->data的值，并且
ngx_cycle->free_connection_n减一。

如果ngx_cycle->files是存在的，并且ngx_cycle->files[s]为空，则将当前的空
闲的c赋给ngx_cycle->files[s]。

rev以及wev分别赋值为c中的读事件和写事件。

下面是重置指向ngx_connection_t类型的指针c。

调用ngx_memzero重置结构体为0。

将c->read置为rev，c->write置为wev。

c->fd为传入的ngx_socket_t类型的参数s。

c->log为log参数。

之后将rev->instance值保存为instance。

再将rev和wev指向的区域置0。

并且rev->instance和wev->instance的值为刚才保存的instance值求非的结果。

rev->index和rev->index为无效索引NGX_INVALID_INDEX。

rev->data和wev->data均设置为c。

并将wev->write位置为1。

ngx_get_connection()返回c。









